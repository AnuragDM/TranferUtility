//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TransferDataUtilityApp.Busy_Transfer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Busy_TransferSoap", Namespace="http://tempuri.org/")]
    public partial class Busy_Transfer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckWebServiceResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertItems_BusyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Busy_Transfer() {
            this.Url = global::TransferDataUtilityApp.Properties.Settings.Default.TransferDataUtilityApp_Busy_Transfer_Busy_Transfer;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckWebServiceResponseCompletedEventHandler CheckWebServiceResponseCompleted;
        
        /// <remarks/>
        public event InsertItems_BusyCompletedEventHandler InsertItems_BusyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckWebServiceResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckWebServiceResponse() {
            object[] results = this.Invoke("CheckWebServiceResponse", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckWebServiceResponseAsync() {
            this.CheckWebServiceResponseAsync(null);
        }
        
        /// <remarks/>
        public void CheckWebServiceResponseAsync(object userState) {
            if ((this.CheckWebServiceResponseOperationCompleted == null)) {
                this.CheckWebServiceResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckWebServiceResponseOperationCompleted);
            }
            this.InvokeAsync("CheckWebServiceResponse", new object[0], this.CheckWebServiceResponseOperationCompleted, userState);
        }
        
        private void OnCheckWebServiceResponseOperationCompleted(object arg) {
            if ((this.CheckWebServiceResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckWebServiceResponseCompleted(this, new CheckWebServiceResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertItems_Busy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertItems_Busy(
                    string ItemName, 
                    string Unit, 
                    bool Active, 
                    decimal StdPack, 
                    decimal Mrp, 
                    decimal Dp, 
                    decimal Rp, 
                    string ParentName, 
                    string ItemCode, 
                    string Syncid, 
                    string ItemType, 
                    string DispName, 
                    string PriceGroup, 
                    string primaryunit, 
                    string Secondaryunit, 
                    decimal PrimaryUnitfactor, 
                    decimal SecondaryUnitfactor, 
                    decimal MOQ, 
                    bool Promoted, 
                    decimal cgstper, 
                    decimal sgstper, 
                    decimal igstper, 
                    string Segment, 
                    string ProductClass, 
                    string Type) {
            object[] results = this.Invoke("InsertItems_Busy", new object[] {
                        ItemName,
                        Unit,
                        Active,
                        StdPack,
                        Mrp,
                        Dp,
                        Rp,
                        ParentName,
                        ItemCode,
                        Syncid,
                        ItemType,
                        DispName,
                        PriceGroup,
                        primaryunit,
                        Secondaryunit,
                        PrimaryUnitfactor,
                        SecondaryUnitfactor,
                        MOQ,
                        Promoted,
                        cgstper,
                        sgstper,
                        igstper,
                        Segment,
                        ProductClass,
                        Type});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertItems_BusyAsync(
                    string ItemName, 
                    string Unit, 
                    bool Active, 
                    decimal StdPack, 
                    decimal Mrp, 
                    decimal Dp, 
                    decimal Rp, 
                    string ParentName, 
                    string ItemCode, 
                    string Syncid, 
                    string ItemType, 
                    string DispName, 
                    string PriceGroup, 
                    string primaryunit, 
                    string Secondaryunit, 
                    decimal PrimaryUnitfactor, 
                    decimal SecondaryUnitfactor, 
                    decimal MOQ, 
                    bool Promoted, 
                    decimal cgstper, 
                    decimal sgstper, 
                    decimal igstper, 
                    string Segment, 
                    string ProductClass, 
                    string Type) {
            this.InsertItems_BusyAsync(ItemName, Unit, Active, StdPack, Mrp, Dp, Rp, ParentName, ItemCode, Syncid, ItemType, DispName, PriceGroup, primaryunit, Secondaryunit, PrimaryUnitfactor, SecondaryUnitfactor, MOQ, Promoted, cgstper, sgstper, igstper, Segment, ProductClass, Type, null);
        }
        
        /// <remarks/>
        public void InsertItems_BusyAsync(
                    string ItemName, 
                    string Unit, 
                    bool Active, 
                    decimal StdPack, 
                    decimal Mrp, 
                    decimal Dp, 
                    decimal Rp, 
                    string ParentName, 
                    string ItemCode, 
                    string Syncid, 
                    string ItemType, 
                    string DispName, 
                    string PriceGroup, 
                    string primaryunit, 
                    string Secondaryunit, 
                    decimal PrimaryUnitfactor, 
                    decimal SecondaryUnitfactor, 
                    decimal MOQ, 
                    bool Promoted, 
                    decimal cgstper, 
                    decimal sgstper, 
                    decimal igstper, 
                    string Segment, 
                    string ProductClass, 
                    string Type, 
                    object userState) {
            if ((this.InsertItems_BusyOperationCompleted == null)) {
                this.InsertItems_BusyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertItems_BusyOperationCompleted);
            }
            this.InvokeAsync("InsertItems_Busy", new object[] {
                        ItemName,
                        Unit,
                        Active,
                        StdPack,
                        Mrp,
                        Dp,
                        Rp,
                        ParentName,
                        ItemCode,
                        Syncid,
                        ItemType,
                        DispName,
                        PriceGroup,
                        primaryunit,
                        Secondaryunit,
                        PrimaryUnitfactor,
                        SecondaryUnitfactor,
                        MOQ,
                        Promoted,
                        cgstper,
                        sgstper,
                        igstper,
                        Segment,
                        ProductClass,
                        Type}, this.InsertItems_BusyOperationCompleted, userState);
        }
        
        private void OnInsertItems_BusyOperationCompleted(object arg) {
            if ((this.InsertItems_BusyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertItems_BusyCompleted(this, new InsertItems_BusyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckWebServiceResponseCompletedEventHandler(object sender, CheckWebServiceResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckWebServiceResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckWebServiceResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertItems_BusyCompletedEventHandler(object sender, InsertItems_BusyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertItems_BusyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertItems_BusyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591